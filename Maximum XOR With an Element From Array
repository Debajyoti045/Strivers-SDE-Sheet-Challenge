#include <bits/stdc++.h> 
class Node{
   public:
        Node* links[2];
    
    bool containKey(int bit){
        return links[bit]!=NULL;
    }

    void put(int bit,Node* node){
        links[bit] = node;
    }

    Node* get(int bit){
        return links[bit];
    }
};

class Trie{
    public:
         Node* root;
  Trie(){
      root = new Node();
  }

  void insert(int num){
      Node* node = root;
    for(int i=31;i>=0;i--){
        int bit = (num >> i) & 1;
        if(!node->containKey(bit)){
           node -> put(bit, new Node());
        }
        node = node->get(bit);
    }
  }

  int findMax(int num){
      Node* node = root;
      int maxNum = 0;
    for(int i=31;i>=0;i--){
        int bit = (num >> i) & 1;
      if(node->containKey(!bit)){
          maxNum = maxNum | (1 << i);
          node = node -> get(!bit);
      }
      else{
          node = node -> get(bit);
      }
    }
    return maxNum;
  }
};

vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
	sort(arr.begin(),arr.end());
	vector<pair<int,pair<int,int>>>offQueries;
	for(int i=0;i<queries.size();i++){
		offQueries.push_back({queries[i][1],{queries[i][0],i}});
	}
    sort(offQueries.begin(),offQueries.end());
    vector<int>ans(queries.size(),0);
    int index =  0;
	int n = arr.size();
	Trie trie;
	for(int i=0;i<queries.size();i++){
         int ai = offQueries[i].first;
		 int xi = offQueries[i].second.first;
		 int que = offQueries[i].second.second;
        while(index<n && arr[index]<=ai){
           trie.insert(arr[index]);
		   index++;
		}

		if(index==0) ans[que] = -1;
		else ans[que] = trie.findMax(xi);
	}
   return ans;
}
