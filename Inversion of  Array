#include <bits/stdc++.h> 
long long merge(long long *arr,long long st,long long mid,long long e){
    long long cnt = 0;
    vector<long long>ans;
    long long i = st;
    long long j = mid + 1;
    while(i<=mid && j<=e){
      if(arr[i]>arr[j]){
          cnt+=(mid-i+1);
          ans.push_back(arr[j]);
          j++;
      }
      else{
          ans.push_back(arr[i]);
          i++;
      }
    }
    while(i<=mid){
         ans.push_back(arr[i]);
          i++;
    }
    while(j<=e){
         ans.push_back(arr[j]);
          j++;
    }
    for(int i=st;i<=e;i++){
        arr[i] = ans[i-st];
    }
    return cnt;
}
long long mergeSort(long long *arr,long long left,long long right){
    long long cnt = 0;
    if(left>=right) return cnt;
    long long mid = (left+right)/2;
    cnt+=mergeSort(arr,left,mid);
    cnt+=mergeSort(arr,mid+1,right);
    cnt+=merge(arr,left,mid,right);
    return cnt;
}
long long getInversions(long long *arr, int n){
    return mergeSort(arr,0,n-1);
}
