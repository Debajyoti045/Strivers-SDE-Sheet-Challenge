#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int v, int edges, int source) {
    vector<pair<int,int>>adj[v];
    for (auto it : vec) {
      adj[it[0]].push_back({it[1], it[2]});
      adj[it[1]].push_back({it[0], it[2]});
    }

    vector<int>dist(v,INT_MAX);
    dist[source] = 0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
    q.push({0,source});
    while(!q.empty()){
        int dis = q.top().first;
        int node = q.top().second;
        q.pop();
      for(auto it:adj[node]){
         int adjnode = it.first;
         int adjwt = it.second;
        if(dis + adjwt < dist[adjnode]){
             dist[adjnode] = dis + adjwt;
             q.push({dist[adjnode],adjnode});
        }
      }
    }
   return dist;
}
