#include <bits/stdc++.h> 
class Node{
   public:
        Node* links[26];
        int ew = 0;
        int cp = 0;

        bool containword(char ch){
            return links[ch-'a']!=NULL;
        }

        void put(char ch,Node* node){
            links[ch-'a'] = node;
        }

        Node* get(char ch){
            return links[ch-'a'];
        }

        void increaseEnd(){
            ew++;
        }

        void increasePre(){
            cp++;
        }

        void deleteEnd(){
            ew--;
        }

        void reducePrefix(){
            cp--;
        }
};
class Trie{
    private:
          Node* root;
    public:

    Trie(){
       root = new Node();
    }

    void insert(string &word){
        Node* node = root;
      for(int i=0;i<word.size();i++){
          if(!node->containword(word[i])){
             node->put(word[i],new Node());
          }
          node = node->get(word[i]);
          node->increasePre();
      }
      node->increaseEnd();
    }

    int countWordsEqualTo(string &word){
         Node* node = root;
      for(int i=0;i<word.size();i++){
          if(!node->containword(word[i])){
             return 0;
          }
           node = node->get(word[i]);
      }
      return node->ew;
    }

    int countWordsStartingWith(string &word){
        Node* node = root;
      for(int i=0;i<word.size();i++){
          if(!node->containword(word[i])){
             return 0;
          }
           node = node->get(word[i]);
      }
      return node->cp;
    }

    void erase(string &word){
        Node* node = root;
      for(int i=0;i<word.size();i++){
          if(node->containword(word[i])){
            node = node->get(word[i]);
            node->reducePrefix();
          }
          else return;
      }
      node->deleteEnd();
    }
};
