bool isLeaf(TreeNode<int>* root){
        if(root->left==NULL && root->right==NULL) return true;
        else return false;
    }
void addLeft(TreeNode<int>* root,vector<int>&ans){
        TreeNode<int>* curr = root->left;
        while(curr!=NULL){
            if(!isLeaf(curr)) ans.push_back(curr->data);
            if(curr->left) curr = curr->left;
            else curr = curr->right;
        }
    }

       void addLeaves(TreeNode<int>* root,vector<int>&ans){
        if(isLeaf(root)) {
            ans.push_back(root->data);
            return;
        }
        if(root->left) addLeaves(root->left,ans);
        if(root->right) addLeaves(root->right,ans);
    }
    
    void addRight(TreeNode<int>* root,vector<int>&ans){
        TreeNode<int>* curr = root->right;
        vector<int>res;
        while(curr!=NULL){
            if(!isLeaf(curr)) res.push_back(curr->data);
            if(curr->right) curr = curr->right;
            else curr = curr->left;
        }
        for(int i=res.size()-1;i>=0;i--){
            ans.push_back(res[i]);
        }
    }
vector<int> traverseBoundary(TreeNode<int>* root){
        vector<int>res;
        if(root==NULL) return res;
        if(!isLeaf(root)) res.push_back(root->data);
        addLeft(root,res);
        addLeaves(root,res);
        addRight(root,res);
        return res;
}
