#include<bits/stdc++.h>
bool bfs(int start,vector<int>&color,vector<int>adj[]){
	    queue<pair<int,int>>q;
        color[start] = 0;
        q.push({start,0});
      while(!q.empty()){
          auto it = q.front();
          q.pop();
          int node = it.first;
          int col = it.second;
        for(auto it:adj[node]){
            if(color[it]==-1){
                color[it] = !col;
              q.push({it,!col});
            }
            else if(color[it]==col) return false;
        }
      }
      return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
   int	n = edges.size();
	vector<int>adj[n];
  for(int i=0;i<edges.size();i++){
    for(int j=0;j<edges[0].size();j++){
      if(edges[i][j]==1 && i!=j){
        adj[i].push_back(j);
        adj[j].push_back(i);
      }
    }
  }
	vector<int>color(n,-1);
    for(int i=0;i<n;i++){
      if (color[i] == -1) {
        if(!bfs(i, color, adj)) return false;
      }
  }
  return true;
}
