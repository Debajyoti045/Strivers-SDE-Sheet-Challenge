#include <bits/stdc++.h> 
void merge(vector<int> &arr, int st, int mid, int e) {
    vector<int> temp;
    int left = st; 
    int right = mid + 1;

    while (left <= mid && right <= e) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }
    while (right <= e) {
        temp.push_back(arr[right]);
        right++;
    }
    for (int i = st; i <= e; i++) {
        arr[i] = temp[i - st];
    }
}

int countPairs(vector<int> &arr, int low, int mid, int high) {
    int right = mid + 1;
    int cnt = 0;
    for (int i = low; i <= mid; i++) {
        while (right <= high && arr[i] > 2 * arr[right]) right++;
        cnt += (right - (mid + 1));
    }
    return cnt;
}

int mergeSort(vector<int> &arr, int left, int right) {
    int cnt = 0;
    if (left >= right) return cnt;
    int mid = (left + right) / 2 ;
    cnt += mergeSort(arr, left, mid);
    cnt += mergeSort(arr, mid + 1, right); 
    cnt += countPairs(arr, left, mid, right);
    merge(arr, left, mid, right); 
    return cnt;
}
int reversePairs(vector<int> &arr, int n){
		return mergeSort(arr,0,n-1);
}
