#include<bits/stdc++.h>
bool bfs(int node,vector<int>&vis,vector<int>adj[]){
    queue<pair<int,int>>q;
    q.push({node,-1});
    vis[node] = 1;
    while(!q.empty()){
        int node = q.front().first;
        int parent = q.front().second;
        q.pop();
      for(auto it:adj[node]) {
          if(!vis[it]){
              q.push({it,node});
              vis[it] = 1;
          }
          else if(it!=parent) return true;
      }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
   vector<int>vis(n+1,0);
   vector<int>adj[n+1];
   for(auto it:edges){
       adj[it[0]].push_back(it[1]);
       adj[it[1]].push_back(it[0]);
   }
   for(int i=1;i<=n;i++){
       if(!vis[i]) if(bfs(i,vis,adj)) return "Yes";
   }
   return "No";
}
