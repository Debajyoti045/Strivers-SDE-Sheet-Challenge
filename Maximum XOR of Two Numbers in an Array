#include <bits/stdc++.h> 
class Node{
   public:
        Node* links[2];
    
    bool containKey(int bit){
        return links[bit]!=NULL;
    }

    void put(int bit,Node* node){
        links[bit] = node;
    }

    Node* get(int bit){
        return links[bit];
    }
};

class Trie{
    public:
         Node* root;
  Trie(){
      root = new Node();
  }

  void insert(int num){
      Node* node = root;
    for(int i=31;i>=0;i--){
        int bit = (num >> i) & 1;
        if(!node->containKey(bit)){
           node -> put(bit, new Node());
        }
        node = node->get(bit);
    }
  }

  int findMax(int num){
      Node* node = root;
      int maxNum = 0;
    for(int i=31;i>=0;i--){
        int bit = (num >> i) & 1;
      if(node->containKey(!bit)){
          maxNum = maxNum | (1 << i);
          node = node -> get(!bit);
      }
      else{
          node = node -> get(bit);
      }
    }
    return maxNum;
  }
};
int maximumXor(vector<int> A)
{
     Trie trie;
     for(auto it:A) trie.insert(it);
     int maxi = 0;
     for(auto it:A){
         maxi = max(maxi,trie.findMax(it));
     }
     return maxi;
}
